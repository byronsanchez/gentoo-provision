<?xml version="1.0" encoding="UTF-8"?>
<article version="5.0" xmlns="http://docbook.org/ns/docbook"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:svg="http://www.w3.org/2000/svg"
         xmlns:m="http://www.w3.org/1998/Math/MathML"
         xmlns:html="http://www.w3.org/1999/xhtml"
         xmlns:db="http://docbook.org/ns/docbook">
  <info>
    <title>Gentoo Hardened SELinux Testing</title>

    <author>
      <personname><firstname>Sven</firstname><surname>Vermeulen</surname></personname>

      <affiliation></affiliation>
    </author>

    <pubdate>2011-02-13</pubdate>
  </info>

  <section>
    <title>Introduction</title>

    <para>As an active contributor to the Gentoo Hardened project with regard
    to SELinux support (both documentation, policy development and ebuilds) I
    find it important to have a good testing approach. Thanks to
    virtualization efforts such as KVM, it is possible to generate a
    semi-automated testing environment, allowing me to test various setups and
    installations before considering contributions stable enough.</para>

    <para>Of course, why using semi-automated testing rather than fully
    automated? Well, I'm probably going to automate more and more to the point
    it is fully automated, but for the time being, it is a semi-automated
    approach ;-)</para>

    <section>
      <title>Testing Overview</title>

      <para>The following table shows the tests that I execute. Most tests are
      based on the documentation offered by Gentoo, which also means that I
      occasionally have to review the scripts to see if they still follow the
      instructions (as documentation changes over time).</para>

      <informaltable>
        <tgroup align="left" cols="2" colsep="1" rowsep="1">
          <colspec colwidth="7cm" />

          <colspec colwidth="10cm" />

          <thead>
            <row>
              <entry>Test Name</entry>

              <entry>Test Description</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry>Stage3 hardened installation</entry>

              <entry>Perform a blank hardened installation, using the latest
              stage3-hardened-amd64 snapshot (in the autobuilds directory).
              Follow the instructions of the Gentoo Handbook closely.</entry>
            </row>

            <row>
              <entry>SELinux conversion</entry>

              <entry>Convert the hardened installation to a SELinux, following
              the instructions in the Gentoo Hardened SELinux handbook. Enable
              SELinux enforcing/strict mode and perform a few standard
              tests.</entry>
            </row>

            <row>
              <entry>MySQL installation and testing</entry>

              <entry>Install MySQL following the MySQL guide and perform a few
              standard tests.</entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
    </section>

    <section>
      <title>Testing Architecture</title>

      <para>To enable semi-automated testing, I run a simple webserver which
      provides read access to:</para>

      <itemizedlist>
        <listitem>
          <para>the host distfiles (URL: /gensetup/gentoo/distfiles)</para>
        </listitem>

        <listitem>
          <para>the stage3 tarball, portage snapshot, Linux kernel binary
          package and installation script (URL: /gensetup/gentoo)</para>
        </listitem>

        <listitem>
          <para>various binhosts for different installation types (URL:
          /gensetup/gentoo/binhost)</para>
        </listitem>
      </itemizedlist>

      <para>The tests all run inside KVM guests (with network access). The
      idea is as follows:</para>

      <orderedlist>
        <listitem>
          <para>Perform a standard stage3 installation, call that
          "hardened-base".</para>
        </listitem>

        <listitem>
          <para>Make a copy-on-write from "hardened-base" and use that one to
          further test hardened setups, call that "hardened"</para>
        </listitem>

        <listitem>
          <para>Make a copy-on-write from "hardened-base" and use that one to
          test the SELinux installation instructions, call that
          "selinux-base"</para>
        </listitem>

        <listitem>
          <para>Make a copy-on-write from "selinux-base" and use that one to
          further test various SELinux setups, call them "selinux"</para>
        </listitem>
      </orderedlist>
    </section>
  </section>

  <section>
    <title>Stage3 Hardened Installation</title>

    <para>This test performs a hardened installation in a virtual environment.
    At the end, we should have a bootable virtual environment with a small but
    functional hardened system (with pax/grsecurity hardening active)
    inside.</para>

    <section>
      <title>Information</title>

      <para>The stage3 hardened installation uses a 20Gbyte qemu image (qcow2
      format):</para>

      <programlisting>~$ <command>qemu-img create -f qcow2 test.img 20G</command></programlisting>

      <para>This image is booted using the system rescue CD ISO:</para>

      <programlisting>~$ <command>qemu-system-x86_64 --enable-kvm -net nic,model=virtio,macaddr=00:11:22:33:44:a0,vlan=0 \
 -net vde,vlan=0 -drive file=test.img,if=virtio,boot=on -usb -usbdevice tablet -smp 2 \
 -k nl-be -m 1024 -boot d -cdrom systemrescuecd-x86-2.0.0.iso</command></programlisting>

      <para>The virtual drive (vda) is formatted with a root partition (vda1,
      ext4), a swap partition and a physical group (vda3) for LVM2. A volume
      group is then created with usr, home, opt and var as logical
      volumes.</para>

      <programlisting>~# <command>df -hT</command>
Filesystem            Type    Size  Used Avail Use% Mounted on
/dev/vda1             ext4    2.0G  424M  1.5G  23% /
udev                 tmpfs     10M  104K  9.9M   2% /dev
shm                  tmpfs    498M     0  498M   0% /dev/shm
/dev/mapper/vg-usr    ext4    9.9G  2.2G  7.3G  23% /usr
/dev/mapper/vg-home   ext4    2.0G   67M  1.9G   4% /home
/dev/mapper/vg-opt    ext4    2.5G   68M  2.3G   3% /opt
/dev/mapper/vg-var    ext4    2.5G  128M  2.3G   6% /var
tmpfs                tmpfs    498M     0  498M   0% /tmp</programlisting>

      <para>During the Gentoo installation, the following settings are
      used.</para>

      <informaltable>
        <tgroup cols="2" colsep="1" rowsep="1">
          <colspec colwidth="7cm" />

          <colspec colwidth="10cm" />

          <thead>
            <row>
              <entry>Setting</entry>

              <entry>Description</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry>Profile = hardened/linux/amd64</entry>

              <entry>The Portage profile selected during the installation is
              the "hardened/linux/amd64" profile.</entry>
            </row>

            <row>
              <entry>USE = -ldap -gtk -xorg -ipv6 -pppd</entry>

              <entry>The USE flags are modified slightly to keep the number of
              package dependencies to a minimum.</entry>
            </row>

            <row>
              <entry>clock/TIMEZONE = Europe/Brussels</entry>

              <entry>The timezone is set to Europe/Brussels</entry>
            </row>

            <row>
              <entry>keymaps/KEYMAP = be-latin1</entry>

              <entry>The keymap is set to be-latin1</entry>
            </row>

            <row>
              <entry>net/config_eth0 = ( "dhcp" )</entry>

              <entry>The network configuration uses DHCP</entry>
            </row>

            <row>
              <entry>/etc/locale.gen only en_US (ISO-8859-15 and
              UTF-8)</entry>

              <entry>The number of locales to be generated by glibc
              installation is limited to the en_US ones.</entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>

      <para>Also, the following packages are installed:</para>

      <itemizedlist>
        <listitem>
          <para>mdadm (as I hope to extend the installation later to use two
          virtual disks in software RAID-1 configuration)</para>
        </listitem>

        <listitem>
          <para>lvm2 (as the installation uses LVM2)</para>
        </listitem>

        <listitem>
          <para>syslog-ng (system logger), this one is also added to the
          default runlevel. During the installation, "<command>unset
          path</command>" is executed (otherwise the installation of syslog-ng
          fails).</para>
        </listitem>

        <listitem>
          <para>dhcpcd (DHCP client)</para>
        </listitem>

        <listitem>
          <para>grub (bootloader)</para>
        </listitem>

        <listitem>
          <para>layman (to add overlays)</para>
        </listitem>

        <listitem>
          <para>vim (personal favorite editor)</para>
        </listitem>

        <listitem>
          <para>git (for client)</para>
        </listitem>

        <listitem>
          <para>eix (portage package information caching)</para>
        </listitem>

        <listitem>
          <para>hardened-sources (kernel sources)</para>
        </listitem>
      </itemizedlist>

      <para>The kernel configuration/build itself is premade (occasionally,
      the Linux kernel build is done and a binary package is created which can
      then be reused across all virtual instances) so is not actually
      tested.</para>

      <para>The method to automatically perform this installation is scripted
      and available from
      http://github.com/sjvermeu/small.coding/gensetup.</para>
    </section>

    <section>
      <title>Deviations</title>

      <para>A few deviations are in place from a standard installation. These
      deviations are occasionally cleared </para>
    </section>

    <section>
      <title>Steps</title>

      <para>Set up the qemu image (20Gbyte);</para>

      <programlisting>~$ <command>qemu-img create -f qcow2 test.img 20G</command></programlisting>

      <para>Boot the image with the sysresccd livecd:</para>

      <programlisting>~$ <command>qemu-system-x86_64 --enable-kvm -net nic,model=virtio,macaddr=00:11:22:33:44:a0,vlan=0 \
 -net vde,vlan=0 -drive file=test.img,if=virtio,boot=on -usb -usbdevice tablet -smp 2 \
 -k nl-be -m 1024 -boot d -cdrom systemrescuecd-x86-2.0.0.iso</command></programlisting>

      <para>Download the installation scripts:</para>

      <programlisting>~# <command>wget http://192.168.100.1:8080/gensetup/gentoo/gensetup.sh</command>
~# <command>wget http://192.168.100.1:8080/gensetup/gentoo/simple.conf</command>
~# <command>chmod +x gensetup.sh</command></programlisting>

      <para>Execute the gensetup.sh script to automatically setup the Gentoo
      Hardened installation:</para>

      <programlisting>~# <command>./gensetup.sh</command></programlisting>

      <para>Finally, reboot the virtual system.</para>
    </section>

    <section>
      <title>Additional Tests</title>

      <para>No additional tests are performed right now.</para>
    </section>
  </section>

  <section>
    <title>SELinux Conversion Installation</title>

    <para>In this test, we convert a fresh hardened installation to
    SELinux.</para>

    <section>
      <title>Information</title>

      <para>To convert the system, we follow the instructions of the draft
      SELinux handbook closely, being:</para>

      <orderedlist>
        <listitem>
          <para>Installing layman and adding the hardened-development
          overlay</para>
        </listitem>

        <listitem>
          <para>Update the /tmp context to tmp_t (instead of tmpfs_t)</para>
        </listitem>

        <listitem>
          <para>Enable a couple of ~arch packages</para>
        </listitem>

        <listitem>
          <para>Switch the Gentoo profile to a SELinux hardened one</para>
        </listitem>

        <listitem>
          <para>Perform the "manual" changes (automatically now ;-)</para>
        </listitem>

        <listitem>
          <para>Upgrade the linux-headers and rebuild glibc</para>
        </listitem>

        <listitem>
          <para>We skip the SELinux kernel installation as our kernel is
          already SELinux aware</para>
        </listitem>

        <listitem>
          <para>We update fstab to include /selinux</para>
        </listitem>

        <listitem>
          <para>After rebooting, we install the SELinux utilities in the
          correct order</para>
        </listitem>

        <listitem>
          <para>We set our target policy to "strict"</para>
        </listitem>

        <listitem>
          <para>We relabel the device files and then the entire
          filesystem</para>
        </listitem>

        <listitem>
          <para>After rebooting, we set the global_ssp boolean to on</para>
        </listitem>
      </orderedlist>

      <para>After all this, we're set.</para>
    </section>

    <section>
      <title>Deviations</title>

      <para>Currently, the only deviation I have is that the Linux kernel
      booted with is already SELinux aware, so this step is skipped.</para>
    </section>

    <section>
      <title>Steps</title>

      <para>Setup the BINHOST to the selinux-base binhost:</para>

      <programlisting>~# <command>vim /etc/make.conf</command>
PORTAGE_BINHOST="http://192.168.100.1:8080/gensetup/gentoo/binhost/selinux-base"</programlisting>

      <para>Download the update_selinux.sh and master.lib.sh files:</para>

      <programlisting>~# <command>wget http://192.168.100.1:8080/gensetup/gentoo/update_selinux.sh</command>
~# <command>wget http://192.168.100.1:8080/gensetup/gentoo/master.lib.sh</command>
~# <command>chmod +x update_selinux.sh</command></programlisting>

      <para>The update script will ask to reboot the system twice and tell you
      to continue then with the next step:</para>

      <programlisting>~# <command>touch EMPTY</command>
~# <command>./update_selinux.sh EMPTY</command>
After the first reboot:
~# <command>./update_selinux.sh EMPTY label</command>
After the second reboot:
~# <command>./update_selinux.sh EMPTY booleans</command></programlisting>

      <para>The EMPTY file is because the script requires a configuration file
      to be passed, even though for this script no configuration file is
      needed. This won't be necessary in future versions of the script.</para>
    </section>

    <section>
      <title>Additional Tests</title>

      <para>The next few tests are needed to validate if everything works
      properly:</para>

      <orderedlist>
        <listitem>
          <para>Reboot the virtual environment, add "enforcing=1" as kernel
          parameter to boot in SELinux mode.</para>

          <para>This should work flawlessly.</para>
        </listitem>

        <listitem>
          <para>Edit the /etc/selinux/config file to use enforcing/strict
          mode. Then, update portage (emerge --sync; layman -S) and update
          world.</para>

          <para>This too should work flawlessly.</para>
        </listitem>
      </orderedlist>
    </section>
  </section>

  <section>
    <title>Appendix: Facilitating Using BINHOST</title>

    <para>Portage has the ability to use BINHOSTs for fast deployments.</para>

    <para>Within the test setup, BINHOST can be used to improve build speeds.
    However, it is important to occasionally clear the BINHOST so that the
    build process is tested too.</para>

    <section>
      <title>Feeding the BINHOST</title>

      <para>A binhost should be based upon a Gentoo Portage profile +
      make.conf setting (including USE flags). The moment this changes, a new
      BINHOST needs to be set up.</para>

      <para>To set up a BINHOST:</para>

      <orderedlist>
        <listitem>
          <para>Perform an entire installation up to the point that it is
          either finished, or that the profile or make.conf changes.</para>
        </listitem>

        <listitem>
          <para>Run quickpkg --include-config=y --include-unmodified-config=y
          for all packages (hint: use /var/db/pkg or, even better, emerge.log
          output)</para>

          <programlisting>quickpkg --include-config=y --include-unmodified-config=y $(grep "completed emerge.* to /" /var/log/emerge.log | awk '{print "="$8}')</programlisting>
        </listitem>

        <listitem>
          <para>Upload the entire /usr/portage/packages location to the
          BINHOST</para>
        </listitem>
      </orderedlist>

      <para>In the future, you can refer to this BINHOST using
      PORTAGE_BINHOST.</para>
    </section>
  </section>
</article>
